19.12
  7z.dll и 7z_x64.dll оба файла располагаются в bin. Их надо загружать по ифдефу.

  Проверить парсер на русские имена. 
  + Передалать парсер через проект либмодбус
  Вытащить стандартные функции парсера. (Пример: e:\SimInTech\repository\source\DSP_CFUNCS\. См. .def файл)
  + Парсер лижит в source.

  Параметр Names пишет строковые имена, что не должно быть.
  
  [Ошибка]:  "FMI. Пожалуйста, укажите существующее имя свойста: "  в объекте  FMI  дважды
  и после не должны появляться 
    [Информация]:  "FMI. Запущен расчет"  в объекте  FMI
    и
    [Информация]:  "FMI. Симуляция остановлена"  в объекте  FMI

  В демо Amesim делаем N портов, потом 0 портов. Получаем
    [Ошибка]:  "Access violation at address 1729F20F in module 'mbtylib.dll'. Read of address 00000000 (002BE20F){mbtylib.dll } [1729F20F] MBTYObjts.TMBTYLayer.StartAsync + $2717


  



Автоматическое подтягивание свойств из XML (на перспективу):

1. Свойства из XML попадают в блок при выборе .FMU. Свойства могут иметь произвольные имена, тип, количество (?!).

2. Формировать из XML произвольное количество входов и выходов с произвольными именами.

3. Наверное, нужно написать скриптовую функцию, которая будет вызываться при выборе .FMU.



Свойства блока:

+ 1. адрес .fmu

+ 2. количество входов

+ 3. количество выходов

+ 4. 5 текстовых свойств



Рабочий вариант:

+ 1. В блоке + 2 свойства - количество входов и количество выходов.

+ 2. Параметры XML пока что не выводятся.

+ 3. Для входов. При старте код проверяте количество входных портов и сравнивает с количеством тегов input. Если нет соответствия, то стоп.



4. Для выходов. При старте код проверяет:

   + 0. В блоке завести 5 текстовых свойств формата PropName1, PropName2, ..

   ? 1. Свойства с именами переменных для созданных портов непустые; != Stop

   ? 2. Свойства с именами переменных для созданных портов совпадают с именами в XML; != Stop

   3. Проверяем, что выбранная переменная не строка. != Stop

   4. Выходные порты связываются с выбранными переменными.

   5. Запуск на расчёт.



+- 5. Код

  + 0. Парсер XML

  + 1. Разобраться с ошибкой при перезапуске (освобождения хендла архиватором - да, добавил функцию close)

  - 2. Проверить, что вся выделенная память, хендлы освобождаются!! (память под model instance не освобождается с помощью freeMem нормально (первый адрес освобождается, потом EInvalidPointer)

  + 3. Папочка с разархивированной .FMU создаётся в каталоге с задачей.

  + 4. Нужна проверка на наличие распакованной .FMU (Если уже есть, то не надо!!!);

  + 5. Все переменные внутри и снаружи имеют значимые имена.

  ? 6. Проверить будет ли cardinal занимать 8 байт на 64-х битной версии. Строка size_t = cardinal. (тогда нужно будет разбираться с 64 битными версиями FMU)

  +- 7. Оформление кода

    +- 1. Почитать Delphi coding style

    ?- 2. Все свойства класса начинаются с f: fClassProperty (не понял, что такое field)

    + 3. Переименовать fname_buffer в fFileNameBuffer и т.д. (там сейчас по-другому написано, с использованием нормальных встроенных функций)

    + 4. Убрать все ненужные пробелы между именами функций и скобочками

    + 5. Посмотреть выравнивания. Должно быть 2 пробела.

    + 6. Выровнять комментарии по столбикам, где это можно.

  + 8. Добавить exit в местах, где появляется r_error, и дальше работать не имеет смысла

  + 9. Разнести диагностические сообщения на две группы (ошибки и рабочие) для удобства.

  + 10. Убрать вывод сообщения, что всё ок на каждом шаге.

  + 11. Заменить выделение памяти calloc на родную дельфовую функцию (GetMem с проверкой на нулевую память (тогда указатель остается на предыдущем адресе).

  + 12. Загрузка dll без привязки к фиксированному пути. 



6. Известные проблемы

  1. [К] для файла .dll не прописывается полный и относительный путь.



7. Что ищет парсер XML

  1. Имя модели

  2. Дополнительное имя функций (???если оно отличается от имени модели)

  3. GUID модели

  4. Количество переменных состояния - х

  5. Количество индикаторов события - z

  6. Время начала интегрирования - если есть

  7. Конечное время интегрирования - если есть

  8. Количество входов

  9. Количество и номера вещественных переменных

  10. Количество и номера целых переменных

  11. Количество и номера булевских переменных

  12. Количество и номера строковых переменных 



8. Что делать сейчас

  + 1. Парсер - Интерфейс на си и экспорт в .dll

  + 2. .pas, который подключается к проекту и функции экспортируются из parser.dll статически (external)

  3. Посмотреть 7z.pas и переключить динамическую загрузку 7z.dll на статическую (чтобы загружалась раньше инициализации )





<29.09>

  1. Лог с незаполненными портами заменить на: "Пожалуйста, укажите имена переменных для всех созданных выходных портов."

  2. Проверка на существование прописанных имён свойств. != stop

  3. + Лог с лишними входными портами заменить на: ".. Необходимое количество входов для модели: <n>."

  4. +? (Исправил по другому) В логах перед словом FMU писать слово "Юнит", и заменить на мужской род.

  5. + Лог "[Информация]:  "Получены начальные производные модели FMU"  в объекте  FMI" выводится дважды.

  6. Добавить лог: "Запуск на расчёт"

  7. + Если есть два выхода с одинаковыми названиями переменных, то пропускаем их на расчёт.

  8. Решено: Известные ошибки:
      В функции freeM на мячике
      строки на values.